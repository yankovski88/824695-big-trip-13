import {createElement} from "../mock/util";

export default class AbstractView {
  constructor() {
    // запрещаем создавать экземпляры классы абстракт напрямую
    if (new.target === AbstractView) { // если класс abstract содрежит ссылку на конструткор
      throw new Error(`class can not create from Abstract`); // то кидаем исключение
    }
    this._element = null;
    // делаем возможность чтобы подпписываться на события внутри компонентов и сделать для этого отдельный интерфейс
    // раз мы будем ставить обработчики внутри компонентов, то нам придется как то их и снимать, чтобы снять нужно
    // сохранить ссылки на оригинальные обработчики события
    // callback передать можно через main.js, а снимать уже нужно внутри компонента

    // значит заведем отдельное поле колбек которое будет являтся объектом сюда будем сохранять все колбеки которые
    // будут приходить из вне т.е. сслыки на функции чтобы потом можно было что-то с этим сделать например снять
    // обработчик
    this._callback = {}; // из вне т.е. из main.js бедет приходить обработчик,здесь мы его будем сохранять и удалялть
  }

  // через этом метода вызовем функцию по отрисовке разметки. Она у всех разная и за этого создаем ее пустой
  getTemplate() {   // через этом метода вызовем функцию по отрисовке разметки
    throw new Error(`Error, pls create getTemplate. Abstract method not implemented: getTemplate`);
  }

  // Имплиментирем этот элемент полностью т.к. работает он везде одинаково.
  // логика для получения элемента которая может быть вставлена в дом. Инициализируем элемент.
  getElement() {
    if (!this._element) { // если значение содержимого приватного поля не заполнено
      // если не будет создан элемент через функцию createElement то getTemplate будет строка и не сможем вставитьв
      // дом этот элемент через replaseChild(), будет вставлятся текст в ковычках.
      this._element = createElement(this.getTemplate()); // то создаем новый элемент через createElement
    }
    return this._element; // возвращаем созданный элемент
  }

  // функция по удалению элемента
  removeElement() {
    this._element = null;
  }
}







